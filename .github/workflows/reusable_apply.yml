name: terraform-apply
on: 
  workflow_call:
    inputs:
      oidc-role-arn:
        required: true
        type: string
      aws-region:
        required: true
        type: string
        default: 'us-east-2'
      apply-flags:
        required: false
        type: string

jobs:
  terraform-apply-actual:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Configure AWS Credentials Action for GitHub Actions
        uses: aws-actions/configure-aws-credentials@v4.0.1
        with:
          aws-region: ${{ inputs.aws-region }}
          role-to-assume: ${{ inputs.oidc-role-arn }}
  
      - uses: hashicorp/setup-terraform@v3
      - name: Terraform Format Check
        id: fmt
        run: terraform fmt -check
        continue-on-error: true
      
      - name: Terraform Init
        id: init
        run: terraform init
      
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
      
      - name: Terraform Apply
        id: apply
        run: terraform apply ${{ inputs.apply-flags }} -auto-approve -no-color
      
      - name: Write Report to PR Comment
        uses: actions/github-script@v6
        if: always() && github.event_name == 'push'
          # if the terraform jobs pass or fail, and we're a push (to main),
          # then write to PR
        env:
          APPLY: "terraform\n${{ steps.apply.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const relatedPR = await github.rest.search.issuesAndPullRequests({
              q: "${{ github.sha }}+repo:${{ github.repository }}+is:pr+is:merged",
            });
            
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>
      
            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`
      
            </details>
      
            #### Terraform Apply üìñ\`${{ steps.apply.outcome }}\`
      
            <details><summary>Show Apply</summary>
      
            \`\`\`\n
            ${process.env.APPLY}
            \`\`\`
      
            </details>
      
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;
            
            github.rest.issues.createComment({
              issue_number: relatedPR.data.items[0].number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

            await core.summary
            .addRaw('See results at ')
            .addLink('this PR.', relatedPR.data.items[0].html_url)
            .write()